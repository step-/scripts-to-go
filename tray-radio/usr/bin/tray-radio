#!/bin/sh
# This file is dynamically sourced on clicking the tray icon.

# META-begin
# tray-radio - Internet Radio (and Media File) Tray Icon Menu
# Copyright (C) step, 2017
# License: GNU GPL Version 2
# Homepage: https://github.com/step-/scripts-to-go
  Version=1.0.1
# META-end

# Run and read "tray-radio --help=all" before changing these values!
PLAY_COMMAND= # leave empty for default player
TRAY_ICON=    # leave empty for built-in icon
TRAY_TOOLTIP= # leave empty for default tooltip

# --- END OF SUPPORTED USER CUSTOMIZATIONS ---

# i18n {{{1
# CAVEAT: Apparently xgettext isn't able to handle command 'gettext -es' below.
export TEXTDOMAIN=step
export OUTPUT_CHARSET=UTF-8
{
  read m_click_left
  read m_click_right
  read m_station
  read m_url
} << EOF
$(gettext -es \
"Left: Select Station\n" \
"Right: Exit\n" \
"%station_name%\n" \
"%URL%\n" \
)
EOF

error_msg() # [$1-gettexted [$2-verbatim]] {{{1
{
  local gettexted verbatim
  gettexted=$(gettext "$1")
  [ $# -gt 0 ] && shift
  verbatim="$*"; [ -n "$verbatim" ] && verbatim=" $verbatim"
  printf "%s: %s%s\n" "${0##*/}" "$gettexted" "$verbatim" >&2
}

set_PLAY_COMMAND() #{{{1
{
# 1\$ => station name <-- REQUIRED, WITHIN SQUARE BRACKETS
# 2\$ => station URL, 3\$ => scriptname, 4\$ => tray icon file
# Note -geometry Rx2: Rx1 gains nothing and hinders mpg123 console output.
local p t m
for p in $(which defaultmediaplayer mpg123 vlc 2>/dev/null) error ; do
  case $p in
    *mpg123) # terminal-based players
      set_TERMINAL || exit $?
      # FIXME xterm doesn't support option -icon.
      PLAY_COMMAND="$TERMINAL -T '[%1\$s] - %3\$s' -geometry 60x2 -icon '%4\$s' -e mpg123 '%2\$s'"
      break
      ;;
    *defaultmediaplayer|*vlc) # GUI-based players
      PLAY_COMMAND="$p '%2\$s' # '[%1\$s]"
      break
      ;;
    error)
      error_msg "Can't find media player. Exit."
      return 1
      ;;
  esac
done
}

set_TERMINAL() # {{{1
{
  local t
  t=$(which defaultterm urxvt roxterm lxterminal xterm 2>/dev/null| head -1)
  if [ -z "$t" ]; then
    error_msg "Can't find a terminal program. Exit."
    return 1
  fi
  TERMINAL=$t
}

set_TRAY_TOOLTIP() #{{{1
{
  TRAY_TOOLTIP="<span size=\"large\">%1\$s</span>
<span size=\"large\">%2\$s</span>
<span size=\"large\">%3\$s</span>
%4\$s"
#%4\$s\n%5\$s"
}

play_m3u() # $1-playlist-file writes $SIT_SELECTED {{{1
{
#DEBUG temporarily delete stderr redirection
#gtkmenuplus - >"$SIT_TMPD/exec" 2>/dev/null <<EOF
gtkmenuplus - >"$SIT_TMPD/exec" <<EOF
$(gtk_menu_m3u "$1")
EOF
# gtkmenuplus prints the command it runs, if any, at the end of its stdout,
# from which we extract the selected station name, which is within square
# brackets, see PLAY_COMMAND.
gawk -F '\\[|\\]' 'END{print $2}' "$SIT_TMPD/exec" > "$SIT_SELECTED"
}

gtk_menu_pls() # $1-pls-file {{{1
# https://en.wikipedia.org/wiki/PLS_(file_format)
{
: TODO
}

gtk_menu_m3u() # $1‚Äêm3u-file {{{1
# https://en.wikipedia.org/wiki/M3U
# .m3u(m3u & extended m3u), .m3u8(unicode m3u)
{
# Need gawk: RS=/regex/, printf w/ positional arguments, /dev/stdin, length(array)
gawk \
  -v PLAY="$SIT_PLAY_COMMAND" \
  -v SCRIPT="$SIT_SCRIPT" \
  -v ICONLF="$SIT_ICONLF" \
  -v STEM="${1%/*}" \
  -v FMT1="$(gettext '<span foreground="red">**too many includes** %s</span>')" \
'
function read_lines(byVal, file, #{{{2
  rs, s) {
  rs = RS
  RS = "a\\yb" # \y match null string at either start or end of a word
  if(file && 1 != index(file, "/"))
    file = STEM file;
#DEBUG
print "read_lines("file")" > "/dev/stderr"
  if(file) {
    getline s < file
    close(file)
  } else getline s;
  # For Windows, Mac, and Linux line termination.
  return split(s, byVal, /\r\n|\n\r|\n/)
}
BEGIN { #{{{2
  na = read_lines(a)
  if(STEM != "" && STEM != "-")
    STEM = STEM"/"
  else STEM = ""
  MAXDEPTH = 3 # 3 => nest max 3+2 menu levels (gtkmenuplus hard limit)
}
END { #{{{2
  if(!na) {
    exit
  }
  print "configure=noicons endsubmenu"
  convert(a, 0, PLAY)
}
function convert(a, depth, play_command, #{{{2
  b, i, line, na, title, to_play, subfile, is_submenu, label, level) {
  na = length(a)
  for(i = 1; i < na; i++) {
    line = a[i]
    # line : fullpath | relpath | url. Cf. https://en.wikipedia.org/wiki/M3U
    # line : '#' ...  ; extended M3U
    if(1 == index(line, "#")) {
      if(match(line, /^#EXTINF:[ \t]*(-?[0-9]*,)?[ \t]*(.+)/, track_info)) {
        #runtime = track_info[1]
        title = track_info[2]
      } else if(match(line, "^#menu[ \t]+")) {
        tail = substr(line, RSTART + RLENGTH)
        if(match(tail, "^item[ \t]*=")) {
          # special case "#menu item=" overrides pending title
          title = substr(tail, RSTART + RLENGTH)
        } else {
          # pass-through to gtkmenuplus, i.e. "#menu icon=/path/to/icon"
          print tail
        }
      } else if(match(line, "^#(include|subinclude)[ \t]+")) {
        subfile = substr(line, RSTART + RLENGTH)
        if(depth > MAXDEPTH) {
          sub(/^[^\/]+\//, "", subfile) # filename
          printf "item="FMT1"\ncmd=false\n", subfile
        } else {
          if(read_lines(b, subfile)) {
            is_submenu = "sub" == substr(line, RSTART + 1, 3)
            if(is_submenu) {
              label = subfile
              sub(/^.*\//, "", label); sub(/\.[^.]+$/, "", label) # basename
              print "submenu="label
            }
            level = convert(b, depth + 1, play_command)
            if(level <= depth) {
              return(level) # continue popping from `#return to=<level>`
            }
            if(is_submenu)
              print "endsubmenu";
          }
        }
      } else if(match(line, "^#return[ \t]+")) {
        if(match(tail = substr(line, RSTART + RLENGTH), "^to[ \t]*=[ \t]*")) {
          # early return from subinclude to `level`
          if(match(level = substr(tail, RSTART + RLENGTH), /^[0-9]+/)) {
            level = substr(level, RSTART, RLENGTH)
#DEBUG
print pad"return to=level("level")" > "/dev/stderr"
            return(level)
          }
        }
      } else if(match(line, "^#PLAY_COMMAND[ \t]+")) {
        play_command = substr(line, RSTART + RLENGTH)
      } else {
        ; # Sink all other comments, including '#EXTM3U' header.
      }

    } else if(match(line, /[^ \t]/)) { # Non-empty lines.
      if(match(line, "^[a-zA-Z]+://")) { # URL
        to_play = line
      } else if(1 == index(line, "/")) { # absolute path
        to_play = line
      } else { # relative path
        to_play = STEM line
      }
      # If the previous cycle did not parse title info
      if(""==title) {
        title = ++c # make a title from an integer counter
      }
      print "item="title \
        "\ntooltip="line \
        "\ncmd="sprintf(play_command, title, to_play, SCRIPT, ICONLF)
      title = ""
    }
  }
  return (MAXDEPTH + 10) # large number signals NORMAL return
}
' "$1"
}

read_SIT_PLAY_COMMAND() #{{{1
{
  local s=$(awk \
  '/^#PLAY_COMMAND[ \t]/{sub(/^[^ \t]+[ \t]+/,X,$0);print;exit}' "$PLAYLIST")
  [ -n "$s" ] && SIT_PLAY_COMMAND="$s"
}

read_TRAY_TOOLTIP() #{{{1
{
  local s=$(awk \
  '/^#TRAY_TOOLTIP[ \t]/{sub(/^[^ \t]+[ \t]+/,X,$0);print;exit}' "$PLAYLIST")
  [ -n "$s" ] && TRAY_TOOLTIP="$s"
}

write_SIT_ICONLF() # {{{1
{
  # Icon source: https://github.com/puppylinux-woof-CE/woof-CE/blob/testing/
  # woof-code/rootfs-skeleton/usr/share/pixmaps/puppy/audio.svg
  TRAY_ICON="$SIT_TMPD/audio.svg"
  echo '<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="100" width="100">

  <path style="fill:#222222;stroke:#666666" d="M 41,65 41,1.4 89,11 89,86 c 0,0 -9,12 -28,5 -8,-3 -7,-12 2,-15 9,-3 15,-1 20,1 L 83,24 47,14 47,72 c 0,0 -5,14 -26,8 -7,-2 -11.8,-12 1,-16 7,-2 14,-2 19,1 z"/>

</svg>' > "$TRAY_ICON" || {
  unset TRAY_ICON
  return 1
  }
}

write_SIT_TOOLTIPF() #{{{1
{
  # Need gawk: printf w/ positional arguments
  gawk \
    -v TOOLTIP="$TRAY_TOOLTIP" -v A1="$m_station" -v A2="$m_click_left" \
    -v A3="$m_click_right" -v A4="$PLAYLIST" \
    -v PLAY="$SIT_PLAY_COMMAND" \
    -v M_STATION="$m_station" -v M_URL="$m_url" \
    -v SCRIPT="$SIT_SCRIPT" -v TRAY_ICON="$TRAY_ICON" \
'
END {
      cmd = sprintf(PLAY, M_STATION, M_URL, SCRIPT, TRAY_ICON)
      printf TOOLTIP, A1, A2, A3, A4, cmd
}
' /dev/null > "$SIT_TOOLTIPF"
}

clickl() #{{{1
{
  local selected
  play_m3u "$SIT_PLAYLIST" # writes $SIT_SELECTED
  # Update tooltip name of selected station.
  # Assert: station name <span> in tooltip file line 1, see $TRAY_TOOLTIP.
  read selected < "$SIT_SELECTED" &&
    [ -n "$selected" ] &&
    sed -i \
    -e '1s| *weight="[^"]*"||g' \
    -e '1s|>[^<]*<| weight="bold">'"$selected"'<|' \
    "$SIT_TOOLTIPF"
}

clickr() #{{{1
{
  local sit_pid
  sit_pid=$(ps -ho ppid $$)
  gtkmenuplus - >/dev/null <<EOF
configure = noicons endsubmenu iconsize 16
item = $(gettext _Help)
icon = gtk-help
cmd = "$SN" --help=all-gui
separator
item = $(gettext _Quit)
icon = gtk-quit
cmd = kill $sit_pid
EOF
}

usage() # [--brief|<help-option>] {{{1
{
# TODO i18n
  echo "Usage: $SN [--help] [OPTIONS] [PLAYLIST'.m3u[8]'] [PLAY-COMMAND]"
  [ "$1" = --brief ] && return
  # This script was developed and tested with:
  local pkg_name="gawk  gtkmenuplus  yad          #recommended mpg123  urxvt"
  local pkg_ver='4.1.1  1.1.5        `or`Xdialog  >            1.23.8  `or`equivalent'
  local pkg_rev="1      1            _            _            1       _"
  local pkg_arch=x86_64
  local pkg_type=txz
  local pkg_url=http://distro.ibiblio.org/fatdog/packages/710/
cat << EOF
OPTIONS:
  Short options can't be combined together. '=' before option value is required.
  -h|--help[=all|=all-gui]  Print help and exit =all(extended) =all-gui(window)
  --tray[=PLAYLIST.m3u[8]]  Start as resident tray icon. Click icon to use.
    When no playlist is specified search for
      '$HOME/$SN.m3u' then for '/usr/share/tray-radio/$SN.m3u'
  --version        Print $Version and exit.
  --               Stop processing options.
Current PLAY-COMMAND:
  $PLAY_COMMAND
Examples:
  $SN --tray=PLAYLIST.m3u [PLAY-COMMAND]
  $SN PLAYLIST.m3u8 [PLAY-COMMAND]
  $SN "--" "-" [PLAY-COMMAND] # playlist from stdin
The plain and simple command "$SN" is reserved and does nothing.
EOF
case $1 in
  --help=all ) : pass-through to show extended help ;;
  --help=all-gui ) usage_gui; exit $? ;;
  * ) # reverse video
    printf "\e[7m%s\e[0m\n" "Type ${0##*/} --help=all for extended help."
    false
    ;;
esac &&
  cat << EOF
DEFAULT PLAY COMMAND - Override the default player
  Set a player either on the command line[1] or in the playlist file[2].
  [1]Command-line examples:
    $SN --tray=~/my-list.m3u 'vlc "%2\$s" # [%1\$s]"'
    $SN --tray=~/my-list.m3u 'urxvt -T "[%1\$s] - %3\$s" -geometry 60x2 -icon "%4\$s" -e mpg123 "%2\$s"'
  where %$1\$s => station name <-- REQUIRED WITHIN SQUARE BRACKETS
        %2\$s => station URL, %3\$s => scriptname, %4\$s => tray icon file
  [2]This method is preferred. See section SPECIAL COMMENT LINES.
  Interesting Command Examples:
    $SN --tray=index.m3u8 'wget "%2\$s" # [%1\$s]"' # downloader menu
PLAYLIST FILE FORMAT
  It's the Extended M3U file format, https://en.wikipedia.org/wiki/M3U.
  A radio station entry consists of two lines:
    #EXTINF:-1,Example Station Name
    http://www/example_station.org/streaming_page
  "Example Radio Station" displays as the menu label unless overriden with
  '#menu item' (see below). A number is shown if nothing else can be found.
  Other comment lines can be inserted before or after the path line, e.g.,
    #EXTINF:-1,BBC 4 News/Features
    # Visit http://www.listenlive.eu/uk.html for more UK stations
    http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio4fm_mf_p
  SPECIAL COMMENT LINES - Legend: +R=repeatable +N=nesting
  * #include example_section.m3u            +R +N
    Include file "example_section.m3u". #include can be repeated. Included
    files can include. Paths are relative to the main playlist file.
    Non-existent files are silently ignored.
  * #subinclude example_submenu.m3u         +R +N
    Include file "example_submenu.m3u" as a sub-menu labelled "example_menu".
  * #return to=LEVEL
    Return immediately from a #subinclude to menu level LEVEL, e.g, "#return
    to=1" returns to the top level, and skips all lines that follow the #return
    line in the current file and in all files that sub-include it up to level
    LEVEL.  Tip: "#return to=0" truncates the menu at the #return line.
  * #menu GTKMENUPLUS-ENTRY
    Emit GTKMENUPLUS-ENTRY. This allows customizing the playlist menu to the
    full extent possible with gtkmenuplus.  For example, if you want to display
    an icon for a specific station, add '#menu icon' after the station path.
    Or to override the station title insert '#menu item' before the path:
      #EXTINF:-1,BBC 4 News/Features
      #menu item=This Week's Favourite
      http://bbcmedia.ic.llnwd.net/stream/bbcmedia_radio4fm_mf_p
      #menu icon=gtk-yes
  * #PLAY_COMMAND vlc "%2\$s" # [%1\$s]"    +R +N
    Use VLC as the default play command. See section DEFAULT PLAY COMMAND.
    #PLAY_COMMAND overrides the command-line value, can be repeated, applies to
    the items after it at the current include level and its sub-levels.
  * #TRAY_ICON /path/to/example-icon.png
    Display example-icon.png instead of the built-in tray icon.
  * #TRAY_TOOLTIP Now Playing %1\$s\\n%\$2s\\n%\$3s
    where %1\$s => most-recent (current) selection
          %2\$s => left-action label, %3\$s => right-action label
          %4\$s => playlist file, %5\$s => play command
    Customize the tray tooltip, which changes each time a station is selected.
THEMING - GTK2_RC_FILES
  To apply a GTK2 theme to the menus use, e.g.,
    env GTK2_RC_FILES=/usr/share/themes/theme-name/gtk-2.0/gtkrc "$SN" --tray
----
EOF
awk '/META-begin$/{f=1;next}/META-end$/{f=0}f' "$0"
printf "$(gettext '%s requires packages:\n ')" "$SN"
awk -v NAME="$pkg_name" -v VER="$pkg_ver" '
END {
  n = split(NAME, name)
  split(VER, ver)
  for(i = 1; i <= n; i++)
    printf " %s-%s", name[i], ver[i];
} ' /dev/null
echo
echo "$pkg_url"
}

usage_gui() # {{{1
{
  local dialog dialog_title
  dialog_title="$(gettext Help) - $SN"
  { type yad 2>/dev/null && dialog=yad || {
    type Xdialog 2>/dev/null && dialog=Xdialog || {
    type zenity 2>/dev/null && dialog=zenity || {
    error_msg "Can't find a dialog command. Exit."
    return 1
  } } } } >/dev/null
  usage --help=all |
  case $dialog in
    yad )
    yad --title "$dialog_title" --width=700 --height=600 --center \
      --text-info --window-icon=gtk-help ;;
    Xdialog )
    Xdialog --title "$dialog_title" --fixed-font --textbox - 700x600 ;;
  esac
}

set_PLAYLIST() # [$1-playlist-file] {{{1
{
  PLAYLIST=$(expand_tilde "${1:-$PLAYLIST}")
  if ! [ -e "$PLAYLIST" ]; then
    usage --brief
    printf "$(gettext "Invalid playlist file '%s'\n")" "${1:-$PLAYLIST}"
    return 1
  fi
}

expand_tilde() # $1-tilde-path {{{1
# Context note: ash and dash expand ~ and ~user. dash expands ~ only.
# https://stackoverflow.com/q/3963716
{
  local tilde_less slash_less user home
  tilde_less=${1#\~}
  if [ "$1" != "$tilde_less" ]; then
    slash_less=${tilde_less#/}
    if [ "$tilde_less" = "$slash_less" ]; then
      user=${slash_less%%/*}
      home=$(getent passwd "$user")
      if [ -n "$home" ]; then
        home=${home%:*}; home=${home##*:}
        tilde_less="$home${tilde_less#${user}}" # ~user
      else
        tilde_less="~$tilde_less" # unknown user
      fi
    else
      tilde_less="${HOME}$tilde_less" # ~/
    fi
  fi
  printf "%s" "$tilde_less"
}

# INIT 1 {{{1
SN=tray-radio # not "${0##*/}" !
alias awk=gawk
set_TRAY_TOOLTIP

# PARSE COMMAND LINE {{{1
# Option format: -x[=parm] | --opt-x[=parm]
# Short options can't be combined together. Space can't substitute '=' before
# option value.  $optIndex points to the current option ($opt) while parsing,
# and to the first non-option argument, if any, after parsing. $# is the number
# of arguments.
unset opt_tray
while case $1 in -*) true ;; *) false ;; esac; do
  opt=$1
  case $opt in
    -h|--help|-h=*|--help=*)
      set_PLAY_COMMAND; usage "$opt"; exit ;;
    --tray) opt_tray=default ;;
    --tray=*) opt_tray=${1#*=} ;;
    --version) echo $Version; exit ;;
    --) shift; break ;;
    -*)
      set_PLAY_COMMAND; usage
      error_msg "unknown option:" "$opt"
      exit 1
      ;;
  esac
  shift
done

# INIT 2 {{{1
while [ default = "$opt_tray" ]; do
  opt_tray="$HOME/$SN.m3u"; [ -f "$opt_tray" ] && break
  opt_tray="/usr/share/tray-radio/$SN.m3u"; [ -f "$opt_tray" ] && break
  error_msg "Can't find default playlist file. Exit."
  exit 1
done
[ -n "$opt_tray" ] && set -- --tray "$opt_tray" "$@"

# Create temporary folder and set traps. {{{1
if [ -z "$SIT_TMPD" ]; then # not yet exported => parent sit
  SIT_TMPD="${SIT_TMPDIR:-/tmp}/$USER-${0##*/}"
  mkdir -p "$SIT_TMPD" && chmod 700 "$SIT_TMPD" || exit 1
  trap 'case "$SIT_TMPD" in ""|/|.|..""|./*|../*) false;; esac && rm -rf "$SIT_TMPD"*' \
    HUP INT QUIT TERM ABRT 0
  SIT_TOOLTIPF="$SIT_TMPD/tooltip$$" # tooltip file
  SIT_ICONLF="$SIT_TMPD/icon$$" # link to icon file
  SIT_SELECTED="$SIT_TMPD/selected$$" # latest menu item selection
  SIT_SCRIPT=${0##*/}
fi

# Sift invalid cases {{{1
if [ -z "$1" ]; then
  : "valid sit callback"
  # User clicked sit icon => sit sources this file then calls click[lr]().
  # Do not 'exit'.
else
  case "$1" in
    --tray|*.m3u|*.m3u8|-) : "valid case($1)" ;;
    *) : "invalid case($1)"; usage >&2; exit 1 ;;
  esac
fi

# Handle valid cases {{{1
if [ -n "$1" ]; then
  [ --tray = "$1" ] && shift
  PLAYLIST=$1
  set_PLAY_COMMAND || exit $? # program default
  SIT_PLAY_COMMAND="${2:-$PLAY_COMMAND}" # from command-line
  if ! [ "$PLAYLIST" = - ]; then
    set_PLAYLIST >&2 || exit $?
  fi
  SIT_PLAYLIST=$PLAYLIST
  if [ -f "$PLAYLIST" ];  then
    read_SIT_PLAY_COMMAND # from PLAYLIST, if any
    read_TRAY_TOOLTIP # ditto
  fi
  ! [ -e "$TRAY_ICON" ] && write_SIT_ICONLF # sets TRAY_ICON
  [ 0 = $? ] && ln -fs "$TRAY_ICON" "$SIT_ICONLF"
  write_SIT_TOOLTIPF

  export SIT_PLAYLIST SIT_PLAY_COMMAND SIT_TMPD SIT_TOOLTIPF SIT_ICONLF SIT_SCRIPT SIT_SELECTED
  if [ -n "$opt_tray" ]; then
    exec sit -i "$0" "$SIT_ICONLF" "$SIT_TOOLTIPF" clickl clickr
    exit 1
  else
    play_m3u "$PLAYLIST"
    sleep 1 # linger until the icon file is used
  fi
fi
