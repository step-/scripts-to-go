#!/bin/ash

# roxmm - ROX-Filer SendTo menu emulator
Version=1.2.0
# License: GNU GPLv3 - (C)2016-2019 step
# Dependencies: rox, gtkmenuplus >= 1.10, at least one of xdg-mime or mimedb,
#   yad for some tool menu entries.
# Homepage: https://github.com/step-/scripts-to-go

TEXTDOMAIN=fatdog OUTPUT_CHARSET=UTF-8
export TEXTDOMAIN OUTPUT_CHARSET

usage() # {{{1
{
  gettext -s "Description:
  ROX-Filer SendTo menu emulator
Usage:
  roxmm [Options] ITEM-PATH
Options:    default value in braces
  --debug=N   N in [0,1] debug level {0}(off)
  --formats='formats'  gtkmenuplus formats for all entries {''}
  --help|-h  display this page and exit
  --highlight=1  highlight .desktop vs. RoxApp vs. other items {0}
  --iconfast=1  use faster icon finder, which may display fewer icons {0}
  --iconsize=SIZE  icon size {16}
  --keyaccel=0  don't underline underscored letters in menu labels {1}
  --mimedb=1  (advanced) use mimedb in addition to xdg-mime {0}
  --position='x y'  menu position coordinates {under mouse}
  --sections=LETTER-ITEMS ordered menu sections to display {'@A @Y @B @C @D Z'}
      Prefix letter with @ to hide section when it contains no items.
      Reorder list as needed. See examples below for meaning of letters.
Environment Variables:
  Each option corresponds to and overrides the value of an environment
  variable, which you set in your shell profile to change roxmm default
  values. Name the environment variable 'ROXMM_' followed by the
  uppercase long option name, for instance:
    env ROXMM_ICONSIZE=24 ROXMM_SECTIONS='A C' roxmm /tmp
Themes: Set GTK2_RC_FILES to alter the default theme for all menus.
Examples:
  env GTK2_RC_FILES=/usr/share/themes/Clearlooks/gtk-2.0/gtkrc roxmm /tmp
  env ROXMM_SECTIONS='A' roxmm a.jpeg ;: Just the MIME handlers.
  env ROXMM_SECTIONS='A B' roxmm a.jpeg ;: MIME handler and 'image/jpeg' SendTo
  env ROXMM_SECTIONS='B C' roxmm a.jpeg ;: 'image/jpeg' and 'image' SendTos
  env ROXMM_SECTIONS='D'   roxmm a.jpeg ;: SendTos for all rox items
  Rox right-click menus don't have equivalents of sections Y and Z:
  env ROXMM_SECTIONS='Y'   roxmm a.jpeg ;: 'image/jpeg' SendTo from xdg-mime
  env ROXMM_SECTIONS='Z'   roxmm a.jpeg ;: ~/.config/roxmm/menu/*.desktop
  env ROXMM_HIGHLIGHT=1 ROXMM_ICONSIZE=24 roxmm a.sh
  env ROXMM_ICONFAST=1 roxmm a.sh
  env ROXMM_HIGHLIGHT=1 ROXMM_FORMATS=\"weight='bold' size='12800'\" roxmm a.jpeg
"
}

message_as_menu() # {{{1
{
  sed -e s/^/item=/ -e s/_/__/g |
  gtkmenuplus - >/dev/null
}

# Get options. {{{1
o_debug=0
o_formats=${ROXMM_FORMATS:-}
o_highlight=${ROXMM_HIGHLIGHT:-0}
o_iconfast=${ROXMM_ICONFAST:-0}
o_iconsize=${ROXMM_ICONSIZE:-16}
o_keyaccel=${ROXMM_KEYACCEL:-1}
o_mimedb=${ROXMM_MIMEDB:-0}
o_position="${ROXMM_POSITION:+menuposition }${ROXMM_POSITION}"
o_sections=${ROXMM_SECTIONS:-@A @Y @B @C @D Z}

ARGS=$(getopt -o h -l \
  help,sections:,highlight:,iconsize:,iconfast:,mimedb:,formats:,position:,keyaccel:,debug: \
  -n "${0##*/}" -- "$@") || exit 1

o_debug=0
eval set -- "${ARGS}"
while test $# -gt 0; do
  case $1 in
    --) shift; break ;;
    --debug) o_debug=$2; shift 2 ;;
    --formats) o_formats=$2; shift 2 ;;
    --help|-h) usage >&2; exit ;;
    --highlight) o_highlight=$2; shift 2 ;;
    --iconfast) o_iconfast=$2; shift 2 ;;
    --iconsize) o_iconsize=$2; shift 2 ;;
    --keyaccel) o_keyaccel=$2; shift 2 ;;
    --mimedb) o_mimedb=$2; shift 2 ;;
    --position) o_position=$2; shift 2 ;;
    --sections) o_sections=$2; shift 2 ;;
    *) exec >&2; gettext "unknown option: "; echo "$*"; exit 1 ;;
  esac
done

if [ $# != 1 ]; then
  usage >&2
  if ! [ -t 0 ]; then
    gettext -s \
      "For help open a terminal window and run: roxmm --help" | message_as_menu
  fi
  exit 1
fi

ITEM_PATH=$1

in_sections() # $*-section-letters {{{1
{
  local a
  for a; do
    case $o_sections in *$a*) return 0 ;; esac
  done
  return 1
}

getv_rox_mime_handler() # $1-path {{{1
# set ROX_HANDLER ROX_MIMETYPE ROX_MIMETYPE_1 ROX_MIMETYPE_2
#
# ROX-Filer maintains its own MIME-type registry. When you left-click an
# item, rox looks up the item's default action in its registry. If not
# found then rox looks up the system MIME registry.
# When you right-click an item and select 'Set Action', rox adds
# a default action link to its registry, but doesn't change the system
# registry. So a file may end up with two different default actions.
{
  unset ROX_HANDLER ROX_MIMETYPE ROX_MIMETYPE_1 ROX_MIMETYPE_2
  ROX_MIMETYPE=$(rox -m "$1")
  if [ -n "ROX_MIMETYPE" ]; then
    ROX_MIMETYPE_1=${ROX_MIMETYPE%/*}
    ROX_MIMETYPE_2=${ROX_MIMETYPE#*/}
    ROX_HANDLER=$HOME/.config/rox.sourceforge.net/MIME-types/${ROX_MIMETYPE_1}_$ROX_MIMETYPE_2
    ! [ -e "$ROX_HANDLER" ] &&
      ROX_HANDLER=/etc/xdg/rox.sourceforge.net/MIME-types/${ROX_MIMETYPE_1}_$ROX_MIMETYPE_2
  fi
  [ -L "$ROX_HANDLER" ] && ROX_HANDLER=$(readlink "$ROX_HANDLER") # deref once only
  ! [ -e "$ROX_HANDLER" ] && unset ROX_HANDLER

  # Most likely the rox mime-type handler is a (link to a) script,
  # which has no associated icon. So we will get an icon from the
  # mime-type. To override this choice the user may re-define the rox
  # mime-type handler as a .desktop file.
}

getv_rox_mime_handler_from_mimetype() # $1-mimetype {{{1
# set ROX_HANDLER_FROM_MIMETYPE
#
# Rationale: look for a user-defined rox handler for a mime-type for
# which rox -m returns null. For instance, xdg-mime, which resorts
# to file -i, can return a non-null mime-type when rox -m returns
# null. Users could mistakingly define a rox handler for that mime-type,
# without realizing that rox will not display it because it considers
# the mime-type to be null.  This function and roxmm menu section Y
# provide users with a work-around for this situation.
{
  unset ROX_HANDLER_FROM_MIMETYPE
  local t1 t1
  t1=${1%/*} t2=${1#*/}
  ROX_HANDLER_FROM_MIMETYPE=$HOME/.config/rox.sourceforge.net/MIME-types/${t1}_$t2
  ! [ -e "$ROX_HANDLER_FROM_MIMETYPE" ] &&
    ROX_HANDLER_FROM_MIMETYPE=/etc/xdg/rox.sourceforge.net/MIME-types/${t1}_$t2
  [ -L "$ROX_HANDLER_FROM_MIMETYPE" ] &&
    ROX_HANDLER_FROM_MIMETYPE=$(readlink "$ROX_HANDLER_FROM_MIMETYPE") # deref once only
  ! [ -e "$ROX_HANDLER_FROM_MIMETYPE" ] && unset ROX_HANDLER_FROM_MIMETYPE

  # Most likely the rox mime-type handler is a (link to a) script,
  # which has no associated icon. So we will get an icon from the
  # mime-type. To override this choice the user may re-define the rox
  # mime-type handler as a .desktop file.
}

get_rox_mimetype_icon() # $1-mimetype [$2-handler-path] {{{1
{
  local p1 p2 e ip handler
  p1=${1%/*} p2=${1#*/}
  handler=$2
  # TODO Find file name format spec. Currently just guessing the format
  # based on observations of file names in folder $ip.
  ip=/usr/local/apps/ROX-Filer/ROX/MIME/$p1-$p2
  for e in png xpm svg; do
    ! [ -e "$ip.$e" ] && continue
    echo "$ip.$e"
    return
  done
  # We get here when an icon isn't found yet. Try harder.
  if [ 1 != $o_iconfast -a -n "$handler" ]; then
    get_rox_mimetype_icon_for_handler "$handler"
  fi
}

get_rox_mimetype_icon_for_handler() # $1-handler-path {{{1
{
  local h
  case $1 in
    /*) h=$1 ;;
    *) h=$(which "$1" 2>/dev/null) ;;
  esac
  get_rox_mimetype_icon $(rox -m "$h")
}

get_roxapp_icon() # $1-roxapp-path {{{1
{
  local p
  p="$1/.DirIcon"
  if [ -e "$p" ]; then
    readlink -e "$p"
  else
    get_rox_mimetype_icon_for_handler "$1/AppRun"
  fi
}

getv_sys_mime_handler() # $1-path {{{1
# set SYS_HANDLER SYS_MIMETYPE
{
  case $o_mimedb in
    1) getv_sys_mime_handler_with_mimedb "$@" ;;
    *) getv_sys_mime_handler_with_xdg_mime "$@" ;;
  esac
# xdg-mime vs. mimedb comparison:
# ACTION - for any given mime-type, xdg-mime returns the .desktop file,
# while mimedb returns the executable path.
# INPUT DATA - xdg-mime halts on non-existent files due to missing file
# data, while mimedb carries on by extrapolating MIME info from the file
# name only.
# MIME-TYPE - xdg-mime and mimedb may return a different mime-type for
# the same file - so I prefer to default to the former for consistency.
}

getv_sys_mime_handler_with_xdg_mime() # $1-path {{{1
# Set SYS_HANDLER SYS_MIMETYPE SYS_MIMETYPE_1 SYS_MIMETYPE_2
{
  unset SYS_HANDLER SYS_MIMETYPE SYS_MIMETYPE_1 SYS_MIMETYPE_2
  SYS_MIMETYPE=$(xdg-mime query filetype "$1" 2>/dev/null)
  SYS_MIMETYPE=${SYS_MIMETYPE%%;*}
  SYS_MIMETYPE_1=${SYS_MIMETYPE%/*}
  SYS_MIMETYPE_2=${SYS_MIMETYPE#*/}
  SYS_HANDLER=$(find_desktop_file_with_xdg_mime "$SYS_MIMETYPE")
  ! [ -e "$SYS_HANDLER" ] && unset SYS_HANDLER
}

getv_sys_mime_handler_with_mimedb() # $1-path {{{1
# Set SYS_HANDLER SYS_MIMETYPE SYS_MIMETYPE_1 SYS_MIMETYPE_2
{
  unset SYS_HANDLER SYS_MIMETYPE SYS_MIMETYPE_1 SYS_MIMETYPE_2
  SYS_MIMETYPE=$(mimedb "$1" 2>/dev/null)
  SYS_MIMETYPE_1=${SYS_MIMETYPE%/*}
  SYS_MIMETYPE_2=${SYS_MIMETYPE#*/}
  SYS_HANDLER=$(mimedb -ai "$SYS_MIMETYPE")
  # Try to find a .desktop file that handles this mime-type.
  local handler
  handler=$(find_desktop_file_with_xdg_mime "$SYS_MIMETYPE")
  [ -e "$handler" ] && SYS_HANDLER=$handler
}

find_desktop_file_with_xdg_mime() # $1-mimetype {{{1
# Return .desktop file FULL path.
{
  local IFS d desktop_file
  [ -n "$1" ] && desktop_file=$(xdg-mime query default "$1" 2>/dev/null)
  [ -z "$desktop_file" ] && return
  shift $#
  IFS=:
  for d in $XDG_DATA_HOME $XDG_DATA_DIRS; do
    if [ -e "$d/applications/$desktop_file" ]; then
      echo "$d/applications/$desktop_file"
      break
    fi
  done
}

ITEM_COUNT=0 ITEM_COUNT_OLD=0 # {{{1}}}
fmt_menu_items() # stdin{handler-path,label,icon,highlight} {{{1
# Return formatted item count as $?
# Handler arguments are appended in Main 'Menu common'.
# Input lines that start with "!raw!" are left unchanged (after deleting "!raw!").
{
  local handler label icon highlight format a count
  count=0
  while read -r handler; do
    case "$handler" in
      "!raw!"*) echo "${handler#!raw!}"; continue ;;
    esac
    read -r label; read -r icon; read -r highlight
    case $label in ''|\#*) label=${handler##*/} ;; esac
    if [ 0 = "$o_keyaccel" -a "${label#*_}" != "$label" ]; then
      # Unlike rox, gtkmenuplus underlines X in "_X". Escape underscores.
      label=$(awk 'BEGIN{x="'"$label"'";gsub(/_/,"__",x);print x}' /dev/null)
    fi
    case $highlight in
      \!*) # always show "!formats" regardless of $o_highlight state
        highlight=${highlight#!} ;;
      *) [ 0 = "$o_highlight" ] && unset highlight ;;
    esac
    format="$o_formats $highlight"
    if is_desktop_file "$handler"; then
      # launcher= with launcherargs= ignores icon= and label=
      echo "
format = $format
launcher = $handler
format ="
        count=$((++count))
    else
      if [ 1 != $o_iconfast -a -z "$icon" ]; then
        icon=$(get_rox_mimetype_icon_for_handler "$handler")
      fi
      case $handler in
        *\"*|*\'*) : ;; # don't quote it if it includes quotes
        *) handler="'$handler'" ;;
      esac
      echo "
format = $format
item = $label
icon = $icon
cmd = $handler \$handler_arguments
format ="
      count=$((++count))
    fi
  done
  return $count
}

PREVIOUS_SECTION=init #{{{1}}}
fmt_separator() # {{{1
{
  if
    # show sep if section added some items
    [ $ITEM_COUNT -gt 0 -a $ITEM_COUNT_OLD -lt $ITEM_COUNT ] ||
    # show sep if no ignore empty section
    case $CURRENT_SECTION in @*) false ;; *) true ;; esac
  then
    [ $PREVIOUS_SECTION != init ] && echo separator
  fi
  ITEM_COUNT_OLD=$ITEM_COUNT
  PREVIOUS_SECTION=$CURRENT_SECTION
}

is_roxapp() # $1-dirpath {{{1
{
  [ -d "$1" ] && [ -r "$1/AppInfo.xml" ] && [ -x "$1/AppRun" ]
}

is_desktop_file() # $1-filepath {{{1
{
  [ -f "$1" ] && [ "${1%.desktop}" != "$1" ]
}

has_sendto_subdir() # $1-SendTo-relative-subdir {{{1
# when directory .../.all exists and it or its sub-dirs contain at least one non-empty file
{
  local p=$HOME/.config/rox.sourceforge.net/SendTo/$1
  set +f
  if [ -d "$p" ]; then
    for p in "$p"/*; do
      if [ -d "$p" ]; then
        has_sendto_subdir "${p#*SendTo/}" && return 0
      else
        [ -s "$p" ] && return 0
      fi
    done
  fi
  return 1
}

get_rox_sendto_handlers() # [ $1-rox-part-path ] {{{1
# Output is piped to fmt_menu_items for downstream formatting.
# ^"!raw!" escapes output lines from such formatting.
{
  local p hom=${1:+/.$1} sys=${1:+/.$1}
  set +f
  2>/dev/null ls -d \
    $HOME/.config/rox.sourceforge.net/SendTo$hom/* \
    /etc/xdg/rox.sourceforge.net/SendTo$sys/* |
  while read p; do
    [ 0 != "$o_debug" ] && echo "# $p" >&2
    if [ -d "$p" ]; then
      if is_roxapp "$p"; then
        handler_path_to_values "$p"
      else # walk into sub-directory
        echo "!raw!submenu = ${p##*/}
!raw!icon ="
        get_rox_sendto_handlers "${p#*SendTo}"
        echo "!raw!endsubmenu"
      fi
    else
      handler_path_to_values "$p"
    fi
  done
}

handler_path_to_values() # $1-handler-path {{{1
{
  local h c
  h=$1
  [ -L "$h" ] && c=$(readlink -e "$h") || c=$h
  if is_desktop_file "$c"; then
    # command is a .desktop file \n label \n icon \n .desktop entry highlight
    printf "%s\n" "$c" "" "" "style='italic'"
    # gtkmenuplus will decode label and icon so ""s above are ignored
  elif is_roxapp "$c"; then
    # command is a ROXApp \n label \n icon \n ROXApp entry highlight
    printf "%s\n" "$c/AppRun" "${h##*/}" "$(get_roxapp_icon "$c")" \
      "foreground='blue'"
  else
    # command is the handler path itself \n label \n icon \n ...
    printf "%s\n" "$c" "${h##*/}" "$icon" "" # default entry: no highlight
  fi
}

# Main {{{1
# yad dialog initialization targets ~/.config/roxmm/menu/ launchers {{{2
YAD_OPTIONS="$YAD_OPTIONS"\
" --title \"$(gettext "roxmm tool")\""\
" --window-icon=roxmm"\
""
export YAD_OPTIONS

{ #{{{2}}}
  # Initialize Menu. {{{2
  echo "
handler_arguments = \"'"$ITEM_PATH"'\"
configure = noicons errorconsoleonly $o_position endsubmenu
iconsize = $o_iconsize
launcherargs = \$handler_arguments # needs gtkmenuplus 1.10+
"

  # Initialize handler data. {{{2
  getv_rox_mime_handler "$ITEM_PATH"
  getv_sys_mime_handler "$ITEM_PATH"

  for CURRENT_SECTION in $o_sections; do # {{{2}}}
    [ 0 != "$o_debug" ] && echo >&2 section_info $CURRENT_SECTION
    case $CURRENT_SECTION in
    *A*) # Mime-type handlers that rox and mimedb define (may differ) {{{2
    if in_sections A; then
      fmt_separator
      if [ -z "$ROX_HANDLER" -a -z "$SYS_HANDLER" ]; then
        # format mimetype(s) for error entry
        if ! in_sections '@A'; then
          mt=$ROX_MIMETYPE
          [ -z "$mt" ] && mt=$SYS_MIMETYPE
          [ $mt != $ROX_MIMETYPE ] && label="$ROX_MIMETYPE $mt"
          [ -n "$mt" ] && mt="($mt)"
          # print: command \n label \n icon \n highlight
          printf "%s\n" \
            false \
            "$(printf "$(gettext "mime type handler not found %s")" "$mt")" \
            "gtk-stop" \
            "!color='red'" |
          fmt_menu_items; ITEM_COUNT=$((ITEM_COUNT+$?))
        fi
      else
        if [ -n "$ROX_HANDLER" ]; then
          printf "%s\n" \
            "$ROX_HANDLER" \
            "${ROX_HANDLER##*/} ($ROX_MIMETYPE)" \
            "$(get_rox_mimetype_icon $ROX_MIMETYPE "$ROX_HANDLER")" \
            "" |
          fmt_menu_items; ITEM_COUNT=$((ITEM_COUNT+$?))
        fi
        if [ -n "$SYS_HANDLER" -a "$SYS_HANDLER" != "$ROX_HANDLER" ]; then
          printf "%s\n" \
            "$SYS_HANDLER" \
            "${SYS_HANDLER##*/} ($SYS_MIMETYPE)" \
            "$(get_rox_mimetype_icon $SYS_MIMETYPE "$SYS_HANDLER")" \
            "" |
          fmt_menu_items; ITEM_COUNT=$((ITEM_COUNT+$?))
        fi
      fi
    fi
    ;;

    *B*) # Rox SendTo handlers for rox mime-type, i.e. 'image/jpeg'. #{{{2
    if in_sections B && [ -n "$ROX_MIMETYPE_2" ]; then
      fmt_separator
      get_rox_sendto_handlers ${ROX_MIMETYPE_1}_$ROX_MIMETYPE_2 |
      fmt_menu_items; ITEM_COUNT=$((ITEM_COUNT+$?))
    fi
    ;;

    *C*) # Rox SendTo handlers for rox mime-type part 1, i.e. 'image' of 'image/jpeg'. #{{{2
    if in_sections C && [ -n "$ROX_MIMETYPE_1" ]; then
      fmt_separator
      get_rox_sendto_handlers $ROX_MIMETYPE_1 |
      fmt_menu_items; ITEM_COUNT=$((ITEM_COUNT+$?))
    fi
    ;;

    *D*) # Rox SendTo handlers for all items. #{{{2
    if in_sections D; then
      if has_sendto_subdir ".all"; then
        fmt_separator
        get_rox_sendto_handlers "all" |
        fmt_menu_items; ITEM_COUNT=$((ITEM_COUNT+$?))
      fi
      fmt_separator
      get_rox_sendto_handlers |
      fmt_menu_items; ITEM_COUNT=$((ITEM_COUNT+$?))
    fi
    ;;

    *Y*) # Rox mime-type handler for xdg mime-type, i.e. 'image/jpeg'. #{{{2
    if in_sections Y && [ -n "$SYS_MIMETYPE" ]; then
      getv_rox_mime_handler_from_mimetype $SYS_MIMETYPE
      if [ -n "$ROX_HANDLER_FROM_MIMETYPE" ]; then
        fmt_separator
        printf "%s\n" \
          "$ROX_HANDLER_FROM_MIMETYPE" \
          "${ROX_HANDLER_FROM_MIMETYPE##*/} ($SYS_MIMETYPE)" \
          "$(get_rox_mimetype_icon $SYS_MIMETYPE "$ROX_HANDLER_FROM_MIMETYPE")" \
          "" |
        fmt_menu_items; ITEM_COUNT=$((ITEM_COUNT+$?))
      fi
    fi
    ;;

    *Z*) # Entries in and under ~/.config/roxmm/menu/. #{{{2
    if in_sections Z; then
      fmt_separator
      md="$HOME/.config/roxmm/menu"
      "$md/bin/bookmarks.awk" -v WRAP=1 \
        "$HOME/.config/rox.sourceforge.net/ROX-Filer/Bookmarks.xml"
      echo endsubmenu  && ITEM_COUNT=$((++ITEM_COUNT))
      echo "launchersub=$md" && ITEM_COUNT=$((++ITEM_COUNT))
      for icon in /usr/local/apps/ROX-Filer*/.DirIcon; do
        if [ -f "$icon" ]; then
          printf "item=%s\nicon=%s\ncmd=%s\n" \
            "$(gettext "Show in _ROX")" "$icon" "rox -s \"$ITEM_PATH\"" &&
          ITEM_COUNT=$((++ITEM_COUNT))
          break
        fi
      done
    fi
    ;;

  esac; done

} | # {{{2}}}
if [ 0 != "$o_debug" ]; then
  tee -a /dev/stderr
else
  cat
fi |
gtkmenuplus - >/dev/null
